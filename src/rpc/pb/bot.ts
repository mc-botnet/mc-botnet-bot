// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.19.6
// source: bot.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { CallContext, CallOptions } from "nice-grpc-common";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "";

export interface ReadyRequest {
  id: string;
}

export interface PingResponse {
  payload: string;
}

function createBaseReadyRequest(): ReadyRequest {
  return { id: "" };
}

export const ReadyRequest: MessageFns<ReadyRequest> = {
  encode(message: ReadyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadyRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: ReadyRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<ReadyRequest>): ReadyRequest {
    return ReadyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadyRequest>): ReadyRequest {
    const message = createBaseReadyRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasePingResponse(): PingResponse {
  return { payload: "" };
}

export const PingResponse: MessageFns<PingResponse> = {
  encode(message: PingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== "") {
      writer.uint32(10).string(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingResponse {
    return { payload: isSet(object.payload) ? globalThis.String(object.payload) : "" };
  },

  toJSON(message: PingResponse): unknown {
    const obj: any = {};
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    return obj;
  },

  create(base?: DeepPartial<PingResponse>): PingResponse {
    return PingResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PingResponse>): PingResponse {
    const message = createBasePingResponse();
    message.payload = object.payload ?? "";
    return message;
  },
};

export type AcceptorDefinition = typeof AcceptorDefinition;
export const AcceptorDefinition = {
  name: "Acceptor",
  fullName: "Acceptor",
  methods: {
    ready: {
      name: "Ready",
      requestType: ReadyRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface AcceptorServiceImplementation<CallContextExt = {}> {
  ready(request: ReadyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface AcceptorClient<CallOptionsExt = {}> {
  ready(request: DeepPartial<ReadyRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

export type BotDefinition = typeof BotDefinition;
export const BotDefinition = {
  name: "Bot",
  fullName: "Bot",
  methods: {
    ping: {
      name: "Ping",
      requestType: Empty,
      requestStream: false,
      responseType: PingResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface BotServiceImplementation<CallContextExt = {}> {
  ping(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<PingResponse>>;
}

export interface BotClient<CallOptionsExt = {}> {
  ping(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<PingResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
